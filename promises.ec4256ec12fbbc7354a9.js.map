{"version":3,"sources":["webpack:///./js/promises-race.js"],"names":["vehicles","refs","startButtonRef","document","querySelector","winnerField","progressField","tableBody","addEventListener","raceCounter","promises","map","run","updateWinnerField","updateProgressField","vehiclesPromises","Promise","race","then","vehicle","time","tr","insertAdjacentHTML","updateTableWinner","all","x","console","log","waitForAll","resolve","min","max","Math","floor","random","setTimeout","message","textContent"],"mappings":"8KAEMA,EAAW,CACf,MACA,KACA,KACA,KACA,MAGIC,EAAO,CACTC,eAAgBC,SAASC,cAAc,gBACvCC,YAAaF,SAASC,cAAc,mBACpCE,cAAeH,SAASC,cAAc,gBACtCG,UAAWJ,SAASC,cAAc,8BAGtCH,EAAKC,eAAeM,iBAAiB,SAIrC,WACIC,GAAe,EACf,IAAMC,EAAWV,EAASW,IAAIC,GAC9BC,EAAkB,sCAClBC,EAAoB,YA2BCC,EA1BLL,EA2BfM,QAAQC,KAAKF,GAAkBG,MAAK,YAAuB,IAApBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KAE7CP,EAAkB,8BAA8BM,EAA/B,gBAAqDC,EAAO,KAA5D,OAazB,YAA2D,IAA9BD,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,KAC5BC,EAAK,WAD4C,EAAfZ,YAChC,YAAqCU,EAArC,aAAwDC,EAAM,KAA9D,aACRnB,EAAKM,UAAUe,mBAAmB,YAAaD,GAd3CE,CAAkB,CAAEJ,UAASC,OAAMX,mBAK3C,SAAoBM,GACfC,QAAQQ,IAAIT,GAAkBG,MAAK,SAAAO,GAChCX,EAAoB,aACxBY,QAAQC,IAAIF,MArCZG,CAAWlB,GAyBf,IAAyBK,KAjCzB,IAAIN,EAAc,EAWlB,SAASG,EAAIO,GACT,OAAO,IAAIH,SAAQ,SAAAa,GACf,IAQeC,EAAKC,EARdX,GAQSU,EARY,IAQPC,EARa,IAS9BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAPhDK,YAAW,WACPN,EAAQ,CAAEV,UAASC,WACpBA,MAQX,SAASP,EAAkBuB,GACvBnC,EAAKI,YAAYgC,YAAcD,EAGnC,SAAStB,EAAoBsB,GACzBnC,EAAKK,cAAc+B,YAAcD,I","file":"promises.ec4256ec12fbbc7354a9.js","sourcesContent":["import '../styles.css';\n\nconst vehicles = [\n  '🚲 ',\n  '🚔',\n  '🏍',\n  '🛩',\n  '🛸',\n];\n\nconst refs = {\n    startButtonRef: document.querySelector('.js-race-btn'),\n    winnerField: document.querySelector('.vehicle-winner'),\n    progressField: document.querySelector('.progress-js'),\n    tableBody: document.querySelector('.js-results-table > tbody'),\n}\n\nrefs.startButtonRef.addEventListener('click', onStart);\n\nlet raceCounter = 0;\n\nfunction onStart() {\n    raceCounter += 1;\n    const promises = vehicles.map(run); // or vehicles.map(vehicle => run(vehicle))\n    updateWinnerField('What is the most faster vehicle 🤨')\n    updateProgressField('🚀 Start');\n    determineWinner(promises);\n    waitForAll(promises);\n}\n\nfunction run(vehicle) {\n    return new Promise(resolve => {\n        const time = getRandomTime(1000, 3000);\n        \n        setTimeout(() => {\n            resolve({ vehicle, time });\n        } ,time)\n    })   \n};\n\nfunction getRandomTime(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction updateWinnerField(message) {\n    refs.winnerField.textContent = message\n}\n\nfunction updateProgressField(message) {\n    refs.progressField.textContent = message\n}\n\nfunction determineWinner(vehiclesPromises) {\n     Promise.race(vehiclesPromises).then(({ vehicle, time }) => {\n        \n        updateWinnerField(`The most faster vehicle is ${vehicle} with speed ${time - 1000} km`)\n        updateTableWinner({ vehicle, time, raceCounter })\n\n    });\n}\n\nfunction waitForAll(vehiclesPromises){\n     Promise.all(vehiclesPromises).then(x => {\n        updateProgressField('🏁 Finish');\n    console.log(x);\n})\n}\n\nfunction updateTableWinner({ vehicle, time, raceCounter }) {\n    const tr = `<tr><td>${raceCounter}</td><td>${vehicle}</td><td>${time -1000}</td></tr>`;\n    refs.tableBody.insertAdjacentHTML('beforeend', tr)\n}\n\n"],"sourceRoot":""}